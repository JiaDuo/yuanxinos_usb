
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdlib.h>
#include <unistd.h>

#include <libusb.h>

#include "main.h"
#include "crc16.h"
#include "protocol.h"


/* usb bulk transfer buffer */
uint8_t data_buffer[DATA_BUFFER_SIZE];

/* libusb variable */
libusb_device **devs;
libusb_device *sprd_dev = NULL;
libusb_device_handle *sprd_handle;	

int is_sprd_dev(libusb_device *dev)
{
	struct libusb_device_descriptor desc;

	int r = libusb_get_device_descriptor(dev,&desc);
	if( r == 0){
		if(desc.idProduct == SPRD_PID && desc.idVendor == SPRD_VID){
			printf("Found sprd usb\n");
			printf("PID = 0x%X , VID = 0x%X\n",desc.idProduct,desc.idVendor);
			return 0;
		}
		else return 1;
	}
	else{
		return r;
	}
}

void print_hex(uint8_t* str,int length)
{
	int i;
        for(i = 0; i < length; i++){
                if(!(i%8)) putchar('\n');
                printf("0x%02x ",str[i]);
        }
	if(i && (i%9))
	        putchar('\n');
}

void debug_print_hex(uint8_t* str,int length)
{
        int i;
#ifdef SPRD_DEBUG
	printf("debug:");
        for(i = 0; i < length; i++){
                if(!(i%8)) putchar('\n');
                printf("0x%02x ",str[i]);
        }
	if(i && (i%9))
	        putchar('\n');
#endif
}

unsigned long get_file_size(const char *path)  
{  
    unsigned long filesize = -1;      
    struct stat statbuff;  
    if(stat(path, &statbuff) < 0){  
        return filesize;  
    }else{  
        filesize = statbuff.st_size;  
    }  
    return filesize;  
}  


void print_device_descriptor(struct libusb_device_descriptor *desc_p)
{
	int i;
        for(i = 0; i < desc_p->bLength; i++){
                if(!(i%8)) putchar('\n');
                printf("0x%02x ",((uint8_t *)desc_p)[i]);
        }
}

void print_config_descriptor(struct libusb_config_descriptor *desc_p)
{
	int i;
        for(i = 0; i < desc_p->bLength; i++){
                if(!(i%8)) putchar('\n');
                printf("0x%02x ",((uint8_t *)desc_p)[i]);
        }
}

void print_interface_descriptor(struct libusb_interface_descriptor *desc_p)
{
	int i;
        for(i = 0; i < desc_p->bLength; i++){
                if(!(i%8)) putchar('\n');
                printf("0x%02x ",((uint8_t *)desc_p)[i]);
        }
}

void printf_endpoint_descriptor(struct libusb_endpoint_descriptor *desc_p)
{
        int i;
        for(i = 0; i < desc_p->bLength; i++){
                if(!(i%8)) putchar('\n');
                printf("0x%02x ",((uint8_t *)desc_p)[i]);
        }
}

/* printf the device descriptor & active config descriptor */
int print_descriptor(libusb_device *sprd_dev)
{
	struct libusb_device_descriptor device_desc;
	struct libusb_config_descriptor *config_desc;
	struct libusb_interface_descriptor *interface_desc;
	struct libusb_endpoint_descriptor *endpoint_desc;
	int i,j;
	int r;

	r = libusb_get_device_descriptor(sprd_dev,&device_desc);
	if(r != 0)
		return r;
	r = libusb_get_active_config_descriptor(sprd_dev,&config_desc);
	//r = libusb_get_config_descriptor(sprd_dev,0,&config_desc);
	if(r != 0)
		return r;

	/* device descritpors */
	printf("Device descriptor:");
	print_device_descriptor(&device_desc);
	putchar('\n');

	/* config descriptors */
	printf("Active config descriptor:");
	print_config_descriptor(config_desc);	
	putchar('\n');	

	/* interface & endpoint descriptors */
	printf("Interface number:0x%02x\n",config_desc->bNumInterfaces);	
	for(i = 0; i < config_desc->bNumInterfaces; i++){
		printf("Interface descriptor:");
		interface_desc = \
			(struct libusb_interface_descriptor*)config_desc->interface[i].altsetting;
		print_interface_descriptor(interface_desc);
		putchar('\n');		

		printf("Endpoint descriptor(num=%02x):",interface_desc->bNumEndpoints);
		endpoint_desc = \
			(struct libusb_endpoint_descriptor*)interface_desc->endpoint;
		for(j = 0; j < interface_desc->bNumEndpoints ;j++){
			printf_endpoint_descriptor(&endpoint_desc[j]);
		}
		
		putchar('\n');
	}
	
	/* free the config struct!!! */
	libusb_free_config_descriptor(config_desc);

	return 0;
}

/* return 0 - normal  no 0 - error */
int sprd_usb_transfer(uint8_t* data,int size)
{
	int r;int cnt;
	r = libusb_bulk_transfer(sprd_handle,SPRD_ENDP_OUT,data,size,&cnt,100);
	return r;
}

int sprd_usb_receive(uint8_t* data,int *size)
{
	int r;
	r = libusb_bulk_transfer(sprd_handle,SPRD_ENDP_IN,data,DATA_BUFFER_SIZE,size,100);
	return r;
}

int sprd_verify_frame(uint8_t* frame,int frame_size)
{
	if(frame[0] != SPRD_START_BYTE || frame[frame_size-1] != SPRD_END_BYTE) 
		return -1;
	if(crc16(0,frame+1,frame_size-4) != ((frame[frame_size-3]<<8)/*'( )'!!*/ | frame[frame_size-2]))
		return -1;
	return 0;
}
/* send com frame without data field */
int sprd_com_nodata(uint8_t bsl_com_byte)
{
	int r;
	uint8_t data[8];
	uint16_t crc;
        data_buffer[0] = SPRD_START_BYTE;       //header
        data_buffer[1] = 0x00;          
        data_buffer[2] = bsl_com_byte;	       //type
        data_buffer[3] = 0x00;
        data_buffer[4] = 0x00;                  //data size
        crc = crc16(0,&data_buffer[1],4);
        data_buffer[5] = crc>>8;
        data_buffer[6] = (crc&0xff);              //crc
        data_buffer[7] = SPRD_END_BYTE;         //ender				
        r = sprd_usb_transfer(data_buffer,8);
	debug_print_hex(data_buffer,8);

        if(r) return r;
	
	return 0;	
}
/* phone ack only first commication (check_baudrate)*/
int sprd_version(void)
{
	int r;int cnt;
        data_buffer[0] = SPRD_START_BYTE;
        r = sprd_usb_transfer(data_buffer,1);
        if(r != 0){
		printf("sprd_version:sprd_usb_transfer error\n");
                return r;
	}
        r = sprd_usb_receive(data_buffer,&cnt);
        if(r != 0) return r;
        r = sprd_verify_frame(data_buffer,cnt);
        if(r != 0) return r;
        debug_print_hex(data_buffer,cnt);	
}

int sprd_connect(void)
{
	int cnt;int r;
	/*
	uint16_t crc;
	data_buffer[0] = SPRD_START_BYTE;	//header
	data_buffer[1] = 0x00;		
	data_buffer[2] = BSL_CMD_CONNECT;	//type
	data_buffer[3] = 0x00;
	data_buffer[4] = 0x00;			//data size
	data_buffer[5] = 0x00;
	data_buffer[6] = 0x00;		//crc
	data_buffer[7] = SPRD_END_BYTE;		//ender	
	r = sprd_usb_transfer(data_buffer,8);
	if(r) return r;
	*/
	r = sprd_com_nodata(BSL_CMD_CONNECT);
	if(r) return r;
	r = sprd_usb_receive(data_buffer,&cnt);
	if(r) return r;
	r = sprd_verify_frame(data_buffer,cnt);
	if(r) return r;
        debug_print_hex(data_buffer,cnt);
        if(data_buffer[SPRD_FRAME_TYPE_OFF] != BSL_REP_ACK){
                return -1;
        }

	return 0;
}

int sprd_exec_data(void)
{
	int cnt;int r;
	r = sprd_com_nodata(BSL_CMD_EXEC_DATA);
	if(r) return r;
	r = sprd_usb_receive(data_buffer,&cnt);
	if(r) return r;
	r = sprd_verify_frame(data_buffer,cnt);
	if(r) return r;
	debug_print_hex(data_buffer,cnt);
        if(data_buffer[SPRD_FRAME_TYPE_OFF] == BSL_REP_ACK )
                return 0;
	else if(data_buffer[SPRD_FRAME_TYPE_OFF] == BSL_INCOMPATIBLE_PARTITION)
		return 1;
	else return -1;
	
	return 0;
}

/* send file to destnation addr */
int sprd_download(const char *file_name,uint32_t download_size,uint32_t dst_addr,uint32_t win_size)
{
	int r;int i=0;int cnt;
	uint16_t crc;
	uint8_t com_buff[16];
	/* start */
	printf("sprd download step:start\n");
	com_buff[i++] = SPRD_START_BYTE;
	com_buff[i++] = 0x00;
	com_buff[i++] = BSL_CMD_START_DATA; //com
	com_buff[i++] = 0x00;
	com_buff[i++] = 0x08; //data size
	com_buff[i++] = dst_addr>>24;
	com_buff[i++] = dst_addr>>16;
	com_buff[i++] = dst_addr>>8;
	com_buff[i++] = dst_addr; //distnation
	com_buff[i++] = download_size>>24;
	com_buff[i++] = download_size>>16;
	com_buff[i++] = download_size>>8;
	com_buff[i++] = download_size; // size
	crc = crc16(0,com_buff+1,12);
	com_buff[i++] = crc>>8;
	com_buff[i++] = crc;	//crc16
	com_buff[i++] = SPRD_END_BYTE;
	debug_print_hex(com_buff,16);
	
	r = sprd_usb_transfer(com_buff,16);
	if(r != 0) return r;
	r = sprd_usb_receive(data_buffer,&cnt);
	if(r != 0) return r;
	r = sprd_verify_frame(data_buffer,cnt);
	if(r != 0) return r;
	if(data_buffer[SPRD_FRAME_TYPE_OFF] != BSL_REP_ACK){
		return -1;
	}
	debug_print_hex(data_buffer,cnt);

	/* middle */
	printf("sprd download step:middle\n");
	int fd = open(file_name,O_RDONLY);
	if(fd == -1){
		printf("middle:open %s error\n",file_name);
		return -1;
	}
	
	ssize_t r_size;
	char *s_buffer = malloc(win_size*2);
	while(download_size){
		printf("download_size is %d\n",download_size);
		r_size = (download_size > win_size ) ? win_size:download_size;
		r_size = read(fd,(void*)(data_buffer+SPRD_FRAME_DATA_OFF),r_size);
		if(r_size == 0){
			printf("middle:read file error\n");
			return -1;
		}
		download_size -= r_size;

	        data_buffer[SPRD_FRAME_START_OFF] = SPRD_START_BYTE;
	        data_buffer[1] = 0x00;
	        data_buffer[SPRD_FRAME_TYPE_OFF] = BSL_CMD_MIDST_DATA;
	        data_buffer[SPRD_FRAME_DATA_SIZE_OFF] = r_size>>8;
	        data_buffer[SPRD_FRAME_DATA_SIZE_OFF+1] = r_size;
		crc = crc16(0,data_buffer+1,r_size+4);
		data_buffer[SPRD_FRAME_DATA_OFF+r_size] = crc>>8;
		data_buffer[SPRD_FRAME_DATA_OFF+r_size+1] = crc;
		data_buffer[r_size+8-1] = SPRD_END_BYTE;
		//send frame steaming 
		//0x7e = 0x7d 0x7e^0x20 0x7d = 0x7d 0x7d^0x20 , except header & ender		
		for(i = 0,cnt = 0; i < r_size+8; i++){
			switch(data_buffer[i]){
				case 0x7e:
					if(i && (i != r_size+7)){
						s_buffer[cnt++] = 0x7d;s_buffer[cnt++] = 0x5e;
					}else s_buffer[cnt++] = data_buffer[i];
					break;
				case 0x7d:
					s_buffer[cnt++] = 0x7d;s_buffer[cnt++] = 0x5d;
					break;
				default:
					s_buffer[cnt++] = data_buffer[i];
					break;
			}
		}
		debug_print_hex(s_buffer,cnt);

		r = sprd_usb_transfer(s_buffer,cnt);
		if(r) {
			printf("sprd_usb_transfer error\n");
			free(s_buffer);
			return r;
		}
		r = sprd_usb_receive(data_buffer,&cnt);
		if(r){
			printf("sprd_usb_receive error\n");
			free(s_buffer);
			return r;
		}
		r = sprd_verify_frame(data_buffer,cnt);
		if(r){
			printf("sprd verify error\n");
			free(s_buffer);
			return r;
		}
		debug_print_hex(data_buffer,cnt);
		if(data_buffer[SPRD_FRAME_TYPE_OFF] != BSL_REP_ACK){
			printf("sprd ack error\n");
			free(s_buffer);
			return -1;
		}
	}
	free(s_buffer);
	if(close(fd) == -1){
		printf("close file error\n");
		return -1;
	}
	/* end */
	printf("sprd download step:end\n");
	r = sprd_com_nodata(BSL_CMD_END_DATA);
	if(r) return r;
	r = sprd_usb_receive(data_buffer,&cnt);
	if(r) return r;
        r = sprd_verify_frame(data_buffer,cnt);
        if(r) {
		return r;
	}
	debug_print_hex(data_buffer,cnt);
        if(data_buffer[SPRD_FRAME_TYPE_OFF] != BSL_REP_ACK){
        	return -1;
        }
		
	return 0;
}

int sprd_upload(char* part_name,int up_size)
{

	return 0;
}

int sprd_task(void)
{
	int r;

	/* sprd version */
	r = sprd_version();
	if(r != 0) {
		printf("sprd version error\n");
	}else{
		printf("sprd_version:\n");
	}

	/* sprd connect */
	r = sprd_connect();
	if(r != 0){
		printf("sprd_connect failed\n");
		return r;
	}else{
		printf("sprd_connect success\n");
	}
	
	/* sprd send fdl1 */
	printf("fdl1.bin file size is %d\n",(int)get_file_size("fdl1.bin"));	
	r = sprd_download("fdl1.bin",get_file_size("fdl1.bin"),0x50000000,528);
	if(r != 0){
		printf("sprd_download fdl1.bin error\n");
		return r;
	}else{
		printf("sprd_download fld1.bin success\n");
	}

	/* running fdl1 */
	r = sprd_exec_data();
	if(r != 0){
		printf("fdl1 exec failed\n");	
		return r;
	}else{
		printf("fdl1 running\n");
	}

        /* sprd version */
        r = sprd_version();
        if(r != 0) {
                printf("sprd version error\n");
        }else{
                printf("sprd_version:\n");
        }

        /* sprd connect */
        r = sprd_connect();
        if(r != 0){
                printf("sprd_connect failed\n");
                return r;
        }else{
                printf("sprd_connect success\n");
        }

	/* sprd send fdl2 */
        printf("fdl2.bin file size is %d\n",(int)get_file_size("fdl2.bin"));   
        r = sprd_download("fdl2.bin",get_file_size("fdl2.bin"),0x9f000000,2112);
        if(r != 0){
                printf("sprd_download fdl2.bin error\n");
                return r;
        }else{
                printf("sprd_download fld2.bin success\n");
        }	
	
	/* sprd read flash partation */
			
}

int main(void)
{
	ssize_t cnt;
	int r;int i;

	/* init libusb */
	r = libusb_init(NULL);
	if(r < 0)
		return r;

	/* find the sprd device */
	cnt = libusb_get_device_list(NULL,&devs);
	if(cnt < 0)
		return (int)cnt;

	for(i = 0; i < cnt; i++){
		if(is_sprd_dev(devs[i]) == 0){
			sprd_dev = devs[i];
			break;
		}
	}		

	if(sprd_dev == NULL){
		printf("sprd_dev is null\n");					
		libusb_free_device_list(devs,1);
		libusb_exit(NULL);
		return ;
	}
		
	/* print descriptor */
	r = print_descriptor(sprd_dev);
	if( r != 0)
		return;
	//////////////////////////////////////////////////////////////////////
	r = libusb_open(sprd_dev,&sprd_handle);
	if(r != 0){
		printf("open sprd_dev error:%d\n",r);	
		libusb_free_device_list(devs,1);
		libusb_exit(NULL);
		return ;
	}
	r = libusb_claim_interface(sprd_handle,SPRD_INTERFACE);//interface 0
	if(r != 0){
		printf("claim interface error:%d\n",r);
	}

	sprd_task();
	
	libusb_release_interface(sprd_handle,0x00);
		
	libusb_close(sprd_handle);
	//////////////////////////////////////////////////////////////////////

	libusb_free_device_list(devs,1);		
	libusb_exit(NULL);		
	return 0;
}












