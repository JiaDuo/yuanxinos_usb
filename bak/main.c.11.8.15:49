
#include <stdio.h>
#include <sys/types.h>
#include <stdlib.h>

#include <libusb.h>

#define SPRD_VID 0x1782  
#define SPRD_PID 0X4d00
//#define SPRD_PID 0x4002 

int is_sprd_dev(libusb_device *dev)
{
	struct libusb_device_descriptor desc;

	int r = libusb_get_device_descriptor(dev,&desc);
	if( r == 0){
		if(desc.idProduct == SPRD_PID && desc.idVendor == SPRD_VID){
			printf("Found sprd usb\n");
			printf("PID = 0x%X , VID = 0x%X\n",desc.idProduct,desc.idVendor);
			return 0;
		}
		else return 1;
	}
	else{
		return r;
	}
}

void print_device_descriptor(struct libusb_device_descriptor *desc_p)
{
	int i;
        for(i = 0; i < desc_p->bLength; i++){
                if(!(i%8)) putchar('\n');
                printf("0x%02x ",((uint8_t *)desc_p)[i]);
        }
}

void print_config_descriptor(struct libusb_config_descriptor *desc_p)
{
	int i;
        for(i = 0; i < desc_p->bLength; i++){
                if(!(i%8)) putchar('\n');
                printf("0x%02x ",((uint8_t *)desc_p)[i]);
        }
}

void print_interface_descriptor(struct libusb_interface_descriptor *desc_p)
{
	int i;
        for(i = 0; i < desc_p->bLength; i++){
                if(!(i%8)) putchar('\n');
                printf("0x%02x ",((uint8_t *)desc_p)[i]);
        }
}

void printf_endpoint_descriptor(struct libusb_endpoint_descriptor *desc_p)
{
        int i;
        for(i = 0; i < desc_p->bLength; i++){
                if(!(i%8)) putchar('\n');
                printf("0x%02x ",((uint8_t *)desc_p)[i]);
        }
}

/* printf the device descriptor & config descriptor */
int print_descriptor(libusb_device *sprd_dev)
{
	struct libusb_device_descriptor device_desc;
	struct libusb_config_descriptor *config_desc;
	struct libusb_interface_descriptor *interface_desc;
	struct libusb_endpoint_descriptor *endpoint_desc;
	int i,j;
	int r;

	r = libusb_get_device_descriptor(sprd_dev,&device_desc);
	if(r != 0)
		return r;
	r = libusb_get_active_config_descriptor(sprd_dev,&config_desc);
	//r = libusb_get_config_descriptor(sprd_dev,0,&config_desc);
	if(r != 0)
		return r;

	/* device descritpors */
	printf("Device descriptor:");
	print_device_descriptor(&device_desc);
	putchar('\n');

	/* config descriptors */
	printf("Active config descriptor:");
	print_config_descriptor(config_desc);	
	putchar('\n');	

	/* interface & endpoint descriptors */
	printf("Interface number:0x%02x\n",config_desc->bNumInterfaces);	
	for(i = 0; i < config_desc->bNumInterfaces; i++){
		printf("Interface descriptor:");
		interface_desc = \
			(struct libusb_interface_descriptor*)config_desc->interface[i].altsetting;
		print_interface_descriptor(interface_desc);
		putchar('\n');		

		printf("Endpoint descriptor(num=%02x):",interface_desc->bNumEndpoints);
		endpoint_desc = \
			(struct libusb_endpoint_descriptor*)interface_desc->endpoint;
		for(j = 0; j < interface_desc->bNumEndpoints ;j++){
			printf_endpoint_descriptor(&endpoint_desc[j]);
		}
		
		putchar('\n');
	}
	
	/* free the config struct!!! */
	libusb_free_config_descriptor(config_desc);

	return 0;
}

/* usb bulk transfer buffer */
uint8_t data_buffer[4096];

int main(void)
{
	libusb_device **devs;
	libusb_device *sprd_dev = NULL;
	libusb_device_handle *sprd_handle;	

	ssize_t cnt;
	int r;int i;int j;

	/* init libusb */
	r = libusb_init(NULL);
	if(r < 0)
		return r;

	/* find the sprd device */
	cnt = libusb_get_device_list(NULL,&devs);
	if(cnt < 0)
		return (int)cnt;

	for(i = 0; i < cnt; i++){
		if(is_sprd_dev(devs[i]) == 0){
			sprd_dev = devs[i];
			break;
		}
	}		

	if(sprd_dev == NULL){
		printf("sprd_dev is null\n");					
		libusb_free_device_list(devs,1);
		libusb_exit(NULL);
		return ;
	}
		
	/* print descriptor */
	r = print_descriptor(sprd_dev);
	if( r != 0)
		return;
	//////////////////////////////////////////////////////////////////////
	r = libusb_open(sprd_dev,&sprd_handle);
	if(r != 0){
		printf("open sprd_dev error:%d\n",r);	
		libusb_free_device_list(devs,1);
		libusb_exit(NULL);
		return ;
	}
	r = libusb_claim_interface(sprd_handle,0x00);//interface 0
	if(r != 0){
		printf("claim interface error:%d\n",r);
	}
	

	data_buffer[0] = 0x7e;
	if(libusb_bulk_transfer(sprd_handle,0x06,data_buffer,1,&j,100) == 0){
		if(libusb_bulk_transfer(sprd_handle,0x85,data_buffer,4096,&j,100) == 0){
			for(i = 0; i < j; i++)
				printf("%02x ",data_buffer[i]);			
		}
	}
		

	libusb_release_interface(sprd_handle,0x00);
		
	libusb_close(sprd_handle);
	//////////////////////////////////////////////////////////////////////

	libusb_free_device_list(devs,1);		
	libusb_exit(NULL);		
	return 0;
}












